// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ScrapeShark.Client
{
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScrapeSharkApi.
    /// </summary>
    internal static partial class ScrapeSharkApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='includeJavaScript'>
            /// </param>
            /// <param name='elementSelector'>
            /// </param>
            /// <param name='includeStyleSheets'>
            /// </param>
            /// <param name='includeImages'>
            /// </param>
            /// <param name='browser'>
            /// </param>
            /// <param name='waitMilliseconds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContentAsync(this IScrapeSharkApi operations, string url = default(string), string apiKey = default(string), bool? includeJavaScript = true, string elementSelector = default(string), bool? includeStyleSheets = false, bool? includeImages = false, string browser = "Firefox", int? waitMilliseconds = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetContentWithHttpMessagesAsync(url, apiKey, includeJavaScript, elementSelector, includeStyleSheets, includeImages, browser, waitMilliseconds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// </param>
            /// <param name='apiKey'>
            /// </param>
            /// <param name='isFullPage'>
            /// </param>
            /// <param name='elementSelector'>
            /// </param>
            /// <param name='browser'>
            /// </param>
            /// <param name='waitMilliseconds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetScreenshotAsync(this IScrapeSharkApi operations, string url = default(string), string apiKey = default(string), bool? isFullPage = false, string elementSelector = default(string), string browser = "Firefox", int? waitMilliseconds = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetScreenshotWithHttpMessagesAsync(url, apiKey, isFullPage, elementSelector, browser, waitMilliseconds, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
